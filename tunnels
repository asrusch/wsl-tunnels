#!/bin/bash
# WSL Client Tunnels
# by Greg Lawler and Andy Rusch

#### Prerequisites ####
# Firefox 64-bit installed
# autossh package is installed
# Your WSL Username and key are on jump_host

#### Firefox Config ####
# - Open Firefox and enter about:profiles in the URL bar
# - Create a new profile called "Tunnels"
# - Open Firefox with the Tunnels profile:
#    - Preferences -> General -> Network Settings -> Manual proxy configuration
#        SOCKS HOST: localhost
#        Port: 2080
#        SOCKS v5: check

##### Defaults
 : ${config:=./tunnels.conf}
 : ${firefox_profile:=Tunnels}
 : ${ssh_config:=~/.ssh/config}
# Exit on error
set -e

# Ensure Firefox is in $PATH.
export PATH="$PATH:/mnt/c/Program Files/Mozilla Firefox"

function stop_all {
    current_tunnel=`ps -ef | grep autossh | grep 2080 | grep -v grep | awk '{print $NF}'`
    # Exit if no tunnels running
    if [ -z "$current_tunnel" ]; then
        echo "No tunnel found"
        exit 1
    fi
    echo "Stopping autossh sessions to $current_tunnel..."
    ps -ef | grep autossh | grep 2080 | grep -v grep | awk '{print $2}' | xargs kill -9
    ps -ef | grep ssh | grep 2080 | grep -v grep | awk '{print $2}' | xargs kill -9
    show_status
    }

function usage_message {
    echo `basename $0`: ERROR: $* 1>&2
    echo Usage: `basename $0` '{client|stop|status|ssh}' 1>&2
    exit 1
}
function show_locations() {
    echo Usage: `basename $0` '{client|stop|status|ssh}' 1>&2
    echo ""
    echo "Available locations in" $config
    while IFS=',' read -r client_service ssh_server client_url; do
        echo "$client_service" 
    done < $config
}

function show_status {
    current_dyn_tunnel=`ps -ef | grep autossh | grep 2080 | grep -v grep | awk '{print $NF}'`
    current_loc_tunnel=`ps -ef | grep autossh | grep 33389 | grep -v grep | awk '{print $NF}'`
    ps auxw | grep -v -e autossh -e grep | grep -q "D 2080" && echo "Dynamic SSH tunnel running to $current_dyn_tunnel..." || ps auxw | grep -v -e autossh -e grep | grep -q "L 33389" && echo "RDP tunnel running to $current_loc_tunnel..." || echo "No SSH tunnels running..."
    }

function launch_firefox() {
    # Start the Firefox profile
    firefox.exe -P $firefox_profile $client_url > /dev/null 2>&1 &
}

function start_tunnel {
    # Exit if existing autossh session detected
    current_dyn_tunnel=`ps -ef | grep autossh | grep 2080 | grep -v grep | awk '{print $NF}'`
    current_loc_tunnel=`ps -ef | grep autossh | grep 33389 | grep -v grep | awk '{print $NF}'`
    ps auxw | grep -v -e autossh -e grep | grep -q "D 2080" && echo "SSH tunnel already running to $current_dyn_tunnel..." && exit 1
    ps auxw | grep -v -e autossh -e grep | grep -q "L 33389" && echo "RDP tunnel already running to $current_loc_tunnel..." && exit 1
    echo "Starting dynamic SSH tunnel to $client_service..."
    autossh -N -M 25000 -D 2080 -o ServerAliveInterval=3 -o ServerAliveCountMax=3 -F $ssh_config $ssh_server > /dev/null 2>&1 &
}

function get_client() {
    while IFS=',' read -r client_service ssh_server client_url || [ -n "$line" ]; do
        if [[ $client_service == $jump_host ]]
        then
            start_tunnel "$ssh_server"
            sleep 3
            # Don't launch Firefox if tunnel not started
            current_tunnel=`ps -ef | grep autossh | grep 2080 | grep -v grep | awk '{print $NF}'`
            if [ -z "$current_tunnel" ]; then
                echo "Tunnel not started, exiting..."
                exit 1
            fi
            show_status
            launch_firefox "$client_url"
            echo "Launching Firefox..." $client_url
        fi
    done < $config
}

function start_ssh() {
    current_tunnel=`ps -ef | grep autossh | grep 2080 | grep -v grep | awk '{print $NF}'`
    # Exit if no tunnel running
    if [ -z "$current_tunnel" ]; then
        echo "No tunnel found"
        exit 1
    fi
    ssh -F $ssh_config $current_tunnel
}

if [ $# -eq 0 ]; # If no input, show status
then
    show_status
    exit 1
else
    jump_host=${1//[^a-zA-Z0-9]/-} # Sanitize the input a bit
    if [ $jump_host == "stop" ]
    then
        stop_all
    elif [ $jump_host == "status" ]
    then
        show_status
    elif [ $jump_host == "locations" ]
    then
        show_locations
    elif [ $jump_host == "ssh" ]
    then
        start_ssh
    else
        get_client "$jump_host"
    fi
fi
